generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity {
  id_activity                                               Int                 @id @default(autoincrement())
  name_activity                                             String
  emission_co2                                              Float
  description                                               String?
  id_category                                               Int?
  category_activity_activity_id_categoryTocategory_activity category_activity?  @relation("activity_id_categoryTocategory_activity", fields: [id_category], references: [id_category], onDelete: NoAction, onUpdate: NoAction)
  activitylog                                               activitylog[]
  carbon_emissions                                          carbon_emissions[]
  category_activity_category_activity_id_activityToactivity category_activity[] @relation("category_activity_id_activityToactivity")
}

model activitylog {
  id_log                                                         Int               @id @default(autoincrement())
  id_user                                                        Int?
  id_activity                                                    Int?
  date                                                           DateTime          @db.Date
  distance_parcourue                                             Float?
  duree_active                                                   DateTime?         @db.Time(6)
  id_recommendation                                              Int?
  id_carbon                                                      Int?
  activity                                                       activity?         @relation(fields: [id_activity], references: [id_activity], onDelete: NoAction, onUpdate: NoAction)
  carbon_emissions                                               carbon_emissions? @relation(fields: [id_carbon], references: [id_carbon], onDelete: NoAction, onUpdate: NoAction)
  recommendations_activitylog_id_recommendationTorecommendations recommendations?  @relation("activitylog_id_recommendationTorecommendations", fields: [id_recommendation], references: [id_recommendation], onDelete: NoAction, onUpdate: NoAction)
  user                                                           user?             @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
  recommendations_recommendations_id_logToactivitylog            recommendations[] @relation("recommendations_id_logToactivitylog")
}

model carbon_emissions {
  id_carbon     Int           @id @default(autoincrement())
  id_activity   Int?
  taux_emission Float?
  activitylog   activitylog[]
  activity      activity?     @relation(fields: [id_activity], references: [id_activity], onDelete: NoAction, onUpdate: NoAction)
}

model category_activity {
  id_category                                      Int        @id @default(autoincrement())
  name_category                                    String
  id_activity                                      Int?
  activity_activity_id_categoryTocategory_activity activity[] @relation("activity_id_categoryTocategory_activity")
  activity_category_activity_id_activityToactivity activity?  @relation("category_activity_id_activityToactivity", fields: [id_activity], references: [id_activity], onDelete: NoAction, onUpdate: NoAction)
}

model recommendations {
  id_recommendation                                          Int           @id @default(autoincrement())
  description                                                String?
  id_log                                                     Int?
  activitylog_activitylog_id_recommendationTorecommendations activitylog[] @relation("activitylog_id_recommendationTorecommendations")
  activitylog_recommendations_id_logToactivitylog            activitylog?  @relation("recommendations_id_logToactivitylog", fields: [id_log], references: [id_log], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id_user     Int           @id(map: "User_pkey") @default(autoincrement())
  password    String
  mail        String
  activitylog activitylog[]
}
